
test {
    useJUnitPlatform()
}

def zipLocation = "${buildDir}/percolation.zip"
def suppliedProjectFolder = "$buildDir/suppliedProject"
def suppliedInputFiles = "$buildDir/inputfiles"

sourceSets {
    supplied {
        java {
            srcDir suppliedProjectFolder
        }
    }
    test {
        resources {
            srcDir suppliedInputFiles
        }
    }
}
dependencies {
    suppliedImplementation project(":percolation")
    suppliedImplementation 'edu.princeton.cs:algs4:1.0.4'
}


task downloadZipFile(type: Download) {
    url = 'https://coursera.cs.princeton.edu/algs4/assignments/percolation/percolation.zip'
    dest = zipLocation
}

task unpack(type: Copy) {
    dependsOn downloadZipFile
    from zipTree(zipLocation)
    exclude ".idea/"
    into suppliedProjectFolder
}

task copyPercolatingTestFiles(type: Copy) {
    dependsOn unpack
    from suppliedProjectFolder
    into "$suppliedInputFiles/percolates"
    include "*.txt"
    exclude "*-no.txt", 'greeting57.txt', "heart25.txt"
}

task copyNotPercolatingTestFiles(type: Copy) {
    dependsOn unpack
    from suppliedProjectFolder
    into "$suppliedInputFiles/nopercolates"
    include "*-no.txt", 'greeting57.txt', 'heart25.txt'
}
task copyTestFiles() {
    dependsOn copyPercolatingTestFiles, copyNotPercolatingTestFiles
}


compileSuppliedJava {
    dependsOn unpack
}

task runInteractivePercolationVisualizer(type: JavaExec) {
    dependsOn compileSuppliedJava
    classpath = sourceSets.supplied.runtimeClasspath
    main = 'InteractivePercolationVisualizer'
}

task runPercolationVisualizer(type: JavaExec) {
    dependsOn compileSuppliedJava
    classpath = sourceSets.supplied.runtimeClasspath
    main = 'PercolationVisualizer'
}

task zipSolution(type: Zip) {
    archiveFileName = "solution.zip"
    destinationDirectory = file("$buildDir/")
    from "$projectDir/src/main/java"
}
